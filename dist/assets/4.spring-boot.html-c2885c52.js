import{_ as o,W as p,X as c,a0 as l,Y as n,Z as s,$ as e,a1 as t,C as i}from"./framework-b5ea9e64.js";const u="/blog-notes/dist/assets/1681093891854-26205c88-4c20-4b63-a2c3-02574778072f-cd679d35.png",r="/blog-notes/dist/assets/image-20230720114813606-56a26ff6.png",d="/blog-notes/dist/assets/1681217799861-dde49224-a767-489b-80b7-7d8d503e33cf-ac5edfb9.png",k="/blog-notes/dist/assets/image-20230720153732111-78ac28d9.png",v="/blog-notes/dist/assets/image-20230720172757271-4796f940.png",g="/blog-notes/dist/assets/1681275459547-89d8d651-b52f-4d47-bff9-6db123624424-8bc68a21.png",m="/blog-notes/dist/assets/1681302411019-0c0425aa-6679-4b2b-a456-b31c151c6e83-58e6e042.png",b="/blog-notes/dist/assets/Snipaste_2023-07-20_20-45-08-04dfe090.png",h="/blog-notes/dist/assets/image-20230720201827187-b25a7d54.png",f="/blog-notes/dist/assets/1681724501227-077073b7-349d-414f-8916-a822eb86c772-5079c3e9.png",y="/blog-notes/dist/assets/1681725850466-2ecf12f4-8b66-469f-9d5d-377a33923b3c-72cc2673.png",w="/blog-notes/dist/assets/Snipaste_2023-07-20_23-32-19-9d8ad930.png",C={},x=n("p",null,"Spring MVC、 WebSocket、 SockJS、 STOMP Messaging。",-1),M=t(`<h1 id="入门案例" tabindex="-1"><a class="header-anchor" href="#入门案例" aria-hidden="true">#</a> 入门案例</h1><p><code>pom.xml</code></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--    所有springboot项目都必须继承自 spring-boot-starter-parent --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--        web开发的场景启动器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// AppContext.java</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppContext</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">AppContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// HelloController.java</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello Spring boot3! &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动<code>AppContext.java</code>。访问：<code>http://localhost:8080</code>。</p><h1 id="spring-boot-的自动配置原理" tabindex="-1"><a class="header-anchor" href="#spring-boot-的自动配置原理" aria-hidden="true">#</a> Spring-boot 的自动配置原理</h1><p><code>@EnableAutoConfiguration</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@AutoConfigurationPackage</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token constant">ENABLED_OVERRIDE_PROPERTY</span> <span class="token operator">=</span> <span class="token string">&quot;spring.boot.enableautoconfiguration&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">excludeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前注解的作用：SpringBoot自动配置的核心注解</p><ol><li>由<code>@Import(AutoConfigurationImportSelector.class)</code>提供功能：批量给容器中导入组件。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">AutoConfigurationEntry</span> <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">EMPTY_ENTRY</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">AnnotationAttributes</span> attributes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">// 获取所有的候选配置类</span>
        <span class="token comment">// 位于 META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</span>
        <span class="token comment">// 一共 142 个类</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> configurations <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 去一下重，以免有相同的 XXXXAutoConfiguration</span>
        configurations <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeDuplicates</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 去掉指定的需要排除的 AutoConfiguration。在 EnableAutoConfiguration注解中设置的 exclude 与 excludeName</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> exclusions <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getExclusions</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkExcludedClasses</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>
        configurations<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将当前系统中生效的XXXAutoConfiguration 从 CandidateConfigurations 中过滤出来【@ConditionalOnXXX】</span>
        configurations <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConfigurationClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fireAutoConfigurationImportEvents</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoConfigurationEntry</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>AutoConfigurationImportSelector.getCandidateConfigurations()</code> 方法可以获取到所有的候选自动配置类，一共是142个自动配置类，位于：<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>。</li><li>通过 <code>AutoConfigurationImportSelector::getConfigurationClassFilter()</code> 将当前系统需要的 <code>AutoConfiguration</code> 过滤出来，加载到<code>IoC</code>容器。</li><li>过滤是通过 <code>@ConditionalOnXXX</code> 判断某个配置类是否生效。</li><li>通过当前系统需要的 <code>AutoConfiguration</code>，加载场景需要的其他所有依赖包。</li><li>这个时候就实现了自动导入。</li><li>如何实现属性配置呢？先观察一下 <code>DataSourceAutoConfiguration</code>。可以发现一个 <code>@EnableConfigurationProperties({DataSourceProperties.class})</code>。<code>EnableConfigurationProperties</code>是开启属性绑定，其中的 <code>DataSourceProperties.class</code>为具体提供功能的类。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AutoConfiguration</span><span class="token punctuation">(</span>
    before <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">SqlInitializationAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">EmbeddedDatabaseType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>
    type <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;io.r2dbc.spi.ConnectionFactory&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">DataSourceProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">DataSourcePoolMetadataProvidersConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceAutoConfiguration</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>观察一下 <code>DataSourceProperties</code> 可以发现该类绑定了 <code>spring.datasource</code>这个前缀。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>
    prefix <span class="token operator">=</span> <span class="token string">&quot;spring.datasource&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceProperties</span> <span class="token keyword">implements</span> <span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> generateUniqueName <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">DataSource</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> driverClassName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> jndiName<span class="token punctuation">;</span>
    <span class="token comment">// ....</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自动配置总结：</p><ol><li>通过 <code>@EnableAutoConfiguration</code> 获得 Spring-boot 的 <code>XXXAutoConfiguration</code>。</li><li>通过 <code>@ConditionalOnXXX</code>，<code>@AutoConfiguration</code>等条件，确定某个配置类是否需要生效。</li><li>将生效的 <code>XXXAutoConfiguration</code> 和其中的 <code>@Bean</code> 以及 <code>XXXProperties</code> 加载到容器。</li><li>通过规定的 <code>XXXProperties</code>中 <code>@ConfigurationProperties</code> 规定的 <code>prefix</code>，对 <code>properties</code> 文件进行解析，实现配置绑定。</li></ol><h2 id="自定义一个自动配置与属性绑定案例" tabindex="-1"><a class="header-anchor" href="#自定义一个自动配置与属性绑定案例" aria-hidden="true">#</a> 自定义一个自动配置与属性绑定案例</h2><p>【todo】</p>`,20),S=n("code",null,"starter",-1),A={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters",target:"_blank",rel:"noopener noreferrer"},j=t(`<h1 id="yaml配置" tabindex="-1"><a class="header-anchor" href="#yaml配置" aria-hidden="true">#</a> Yaml配置</h1><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h2><ul><li><strong>大小写敏感</strong></li><li>使用<strong>缩进表示层级关系，k: v，使用空格分割k,v</strong></li><li>缩进时不允许使用Tab键，只允许<strong>使用空格</strong>。换行</li><li>缩进的空格数目不重要，只要<strong>相同层级</strong>的元素<strong>左侧对齐</strong>即可</li><li><strong># 表示注释</strong>，从这个字符一直到行尾，都会被解析器忽略。</li></ul><p>支持的写法：</p><ul><li><strong>对象</strong>：<strong>键值对</strong>的集合，如：映射（map）/ 哈希（hash） / 字典（dictionary）</li><li><strong>数组</strong>：一组按次序排列的值，如：序列（sequence） / 列表（list）</li><li><strong>纯量</strong>：单个的、不可再分的值，如：字符串、数字、bool、日期</li></ul><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Person.java</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;person&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@ToString</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> height<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthDay<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> like<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> locations<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">&gt;</span></span> catsList<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Cat</span><span class="token punctuation">&gt;</span></span> catsMap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>application.yml</code></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">person</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> name
  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">12</span>
  <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">175.34</span>
  <span class="token key atrule">birth-day</span><span class="token punctuation">:</span> 2010/10/10 12<span class="token punctuation">:</span><span class="token datetime number">12:12</span>
  <span class="token key atrule">like</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">cat</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> 小小
    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">2</span>
  <span class="token key atrule">locations</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;111&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;222&quot;</span><span class="token punctuation">]</span>
  <span class="token key atrule">cats-list</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 小米
      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">1</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 小小小
      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">3</span>
  <span class="token key atrule">cats-map</span><span class="token punctuation">:</span>
    <span class="token key atrule">cat1</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> 小明
      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">10</span>
    <span class="token key atrule">cat02</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> 小李
      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>结果</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 结果
Person(name=name, age=12, height=175.34, birthDay=Sun Oct 10 12:12:12 CST 2010, like=true, cat=Cat(name=小小, age=2), locations=[111, 222], catsList=[Cat(name=小米, age=1), Cat(name=小小小, age=3)], catsMap={cat1=Cat(name=小明, age=10), cat02=Cat(name=小李, age=11)})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="细节" tabindex="-1"><a class="header-anchor" href="#细节" aria-hidden="true">#</a> 细节</h2><ul><li><p>birthDay 推荐写为 birth-day</p></li><li><p><strong>文本</strong>：</p></li><li><ul><li><strong>单引号</strong>不会转义【\\n 则为普通字符串显示】</li></ul></li><li><ul><li><strong>双引号</strong>会转义【\\n会显示为<strong>换行符</strong>】</li></ul></li><li><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">person</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> “name \\n 132”  <span class="token comment"># 会将 \\n 进行转义</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">&#39;name \\n 132&#39;</span>  <span class="token comment"># 不会将 \\n 进行转义</span>
  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>大文本</strong></p><ul><li><p><code>|</code>开头，大文本写在下层，<strong>保留文本格式</strong>，<strong>换行符正确显示</strong></p></li><li><p><code>&gt;</code>开头，大文本写在下层，折叠换行符</p></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">person</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
  		fsdf
  		132131  # 保留换行符</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token punctuation">&gt;</span><span class="token scalar string">
  		fsdf
  		132131  # 不保留换行符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>多文档合并</strong></p><ul><li>使用<code>---</code>，可以对文档进行分层分级。</li></ul></li></ul><h1 id="logging" tabindex="-1"><a class="header-anchor" href="#logging" aria-hidden="true">#</a> Logging</h1><p>日志的 <code>spring-boot-starter-logging</code>，<code>SpringBoot</code> 默认在 <code>spring-boot-starter</code> 中已经导入了。默认使用的是 <code>slf4j + logback</code>。</p><p>由于日志是系统一启动就要用，相比于 <code>XXXAutoConfiguration</code> 配置的组件，日志需要更早的配置。故而不能使用其他组件的 <code>AutoConfiguration</code>的方式，而是使用<code>ApplicationListener</code>。</p><h2 id="默认的日志的格式与修改" tabindex="-1"><a class="header-anchor" href="#默认的日志的格式与修改" aria-hidden="true">#</a> 默认的日志的格式与修改</h2><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>2023-03-31T13:56:17.511+08:00  INFO 4944 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2023-03-31T13:56:17.511+08:00  INFO 4944 --- [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.7]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>默认输出格式：</p><ul><li>时间和日期：毫秒级精度</li><li>日志级别：ERROR, WARN, INFO, DEBUG, or TRACE.</li><li>进程 ID</li><li>---： 消息分割符</li><li>线程名： 使用[]包含</li><li>Logger 名： 通常是产生日志的<strong>类名</strong></li><li>消息： 日志记录的内容</li></ul><p>注意： <code>logback</code> 没有<code>FATAL</code>级别，对应的是<code>ERROR</code></p><p>默认值：参照：<code>spring-boot</code>包<code>additional-spring-configuration-metadata.json</code>文件</p><p>默认输出格式值：<code>%clr(%d{\${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX}}){faint} %clr(\${LOG_LEVEL_PATTERN:-%5p}) %clr(\${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n\${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>%d{}  格式化一个日期
%-5: 对齐		level 级别
%logger 	：输出日志的类
%msg 		：消息
%n： 		换行
%clr(){}     彩色显示
可以选择的颜色：blue   cyan：青色  faint：淡色  green：绿色  magenta：紫红   red：红  yellow
\${PID:- } ： 这里的  \${PID:- } 如果没有 PID 就显示 - ， 如果有 PID 变量，就按照PID的值显示。这也就是说明可以对其进行定制化的设置。 

&quot;%clr(%d{\${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX}}){faint} %clr(\${LOG_LEVEL_PATTERN:-%5p}) %clr(\${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n\${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可修改为：<code>&#39;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{15} ===&gt; %msg%n&#39;</code></p><ul><li>单独设置输出日志的年月日，在 <code>application.yml</code> 中</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">pattern</span><span class="token punctuation">:</span>
    <span class="token key atrule">dateformat</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss.SSS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认的日志设置都在：<code>org.springframework.boot:spring-boot 下 additional-spring-configuration-metadata.json</code></p><h2 id="开发时使用的日志设置" tabindex="-1"><a class="header-anchor" href="#开发时使用的日志设置" aria-hidden="true">#</a> 开发时使用的日志设置</h2><ul><li>手动创建对象的方式</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloDemo03</span> <span class="token punctuation">{</span>

    <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hellodemo03&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;hahah 进来了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>@Slf4j</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloDemo03</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hellodemo03&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;hahah 进来了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="日志等级" tabindex="-1"><a class="header-anchor" href="#日志等级" aria-hidden="true">#</a> 日志等级</h2><ul><li><p>由低到高：<code>ALL,TRACE, DEBUG, INFO, WARN, ERROR,FATAL,OFF</code>；</p></li><li><ul><li><strong>只会打印指定级别及以上级别的日志</strong></li><li>ALL：打印所有日志</li><li>TRACE：追踪框架详细流程日志，一般不使用</li><li>DEBUG：开发调试细节日志</li><li>INFO：关键、感兴趣信息日志</li><li>WARN：警告但不是错误的信息日志，比如：版本过时</li><li>ERROR：业务错误日志，比如出现各种异常</li><li>FATAL：致命错误日志，比如jvm系统崩溃</li><li>OFF：关闭所有日志记录</li></ul></li><li><p>不指定级别的所有类，都使用root指定的级别作为默认级别</p></li><li><p>SpringBoot日志<strong>默认级别是</strong> <strong>INFO</strong></p></li></ul><h3 id="设置日志等级" tabindex="-1"><a class="header-anchor" href="#设置日志等级" aria-hidden="true">#</a> 设置日志等级</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 默认等级下，如果指定具体的某个类的日志级别，整个系统的日志级别都遵循 root 的级别</span>
<span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">root</span><span class="token punctuation">:</span> debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以指定具体的某个包下的类使用具体的等级，如下配置。此时 <code>com.hhyy.domain</code> 下的类日志，只会打印 <code>warn</code> 以上的日志。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">root</span><span class="token punctuation">:</span> info
    <span class="token key atrule">com</span><span class="token punctuation">:</span>
      <span class="token key atrule">hhyy</span><span class="token punctuation">:</span>
        <span class="token key atrule">domain</span><span class="token punctuation">:</span> warn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="日志分组" tabindex="-1"><a class="header-anchor" href="#日志分组" aria-hidden="true">#</a> 日志分组</h2><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">logging.group.tomcat</span><span class="token punctuation">=</span><span class="token value attr-value">org.apache.catalina,org.apache.coyote,org.apache.tomcat</span>
<span class="token comment"># 这样已设置，上面的一堆包下的类都被设置为info等级的日志</span>
<span class="token key attr-name">logging.level.tomcat</span><span class="token punctuation">=</span><span class="token value attr-value">info</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>springboot</code>提供的默认分组</li></ul>`,42),q=n("thead",null,[n("tr",null,[n("th",null,"分组名"),n("th",null,"包名")])],-1),E=n("tr",null,[n("td",null,"sql"),n("td",null,"org.springframework.jdbc.core, org.hibernate.SQL, org.jooq.tools.LoggerListener")],-1),_=n("td",null,"web",-1),R={href:"http://org.springframework.web",target:"_blank",rel:"noopener noreferrer"},T={href:"http://org.springframework.boot.actuate.endpoint.web",target:"_blank",rel:"noopener noreferrer"},P=t(`<div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 使用</span>
<span class="token key attr-name">logging.level.sql</span><span class="token punctuation">=</span><span class="token value attr-value">info</span>
<span class="token key attr-name">logging.level.web</span><span class="token punctuation">=</span><span class="token value attr-value">info</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件输出" tabindex="-1"><a class="header-anchor" href="#文件输出" aria-hidden="true">#</a> 文件输出</h2><p><code>SpringBoot</code> 默认只把日志写在控制台，如果想额外记录到文件，可以在<code>application.properties</code>中添加<code>logging.file.name</code> or <code>logging.file.path</code>配置项。</p>`,3),I={href:"http://logging.file.name",target:"_blank",rel:"noopener noreferrer"},W=n("th",null,"logging.file.path",-1),H=n("th",null,"示例",-1),O=n("th",null,"效果",-1),L=n("tbody",null,[n("tr",null,[n("td",null,"未指定"),n("td",null,"未指定"),n("td"),n("td",null,"仅控制台输出")]),n("tr",null,[n("td",null,[n("strong",null,"指定")]),n("td",null,"未指定"),n("td",null,"my.log"),n("td",null,"写入指定文件。可以加路径")]),n("tr",null,[n("td",null,"未指定"),n("td",null,[n("strong",null,"指定")]),n("td",null,"/var/log"),n("td",null,[s("写入指定目录，文件名为"),n("code",null,"spring.log")])]),n("tr",null,[n("td",null,[n("strong",null,"指定")]),n("td",null,[n("strong",null,"指定")]),n("td"),n("td",null,[s("以"),n("code",null,"logging.file.name"),s("为准")])])],-1),N=t(`<h2 id="文件归档与滚动切割" tabindex="-1"><a class="header-anchor" href="#文件归档与滚动切割" aria-hidden="true">#</a> 文件归档与滚动切割</h2><blockquote><p>归档：每天的日志单独存到一个文档中。</p><p>切割：每个文件10MB，超过大小切割成另外一个文件。</p></blockquote><ol><li>每天的日志应该独立分割出来存档。如果使用<code>logback</code>（<code>SpringBoot</code> 默认整合），可以通过<code>application.properties/yaml</code>文件指定日志滚动规则。</li><li>如果是其他日志系统，需要自行配置（添加<code>log4j2.xml</code>或<code>log4j2-spring.xml</code>）</li><li>支持的滚动规则设置如下</li></ol><table><thead><tr><th>Name</th><th>description</th></tr></thead><tbody><tr><td>logging.logback.rollingpolicy.clean-history-on-start</td><td>应用启动时是否清除以前存档（默认值：false）</td></tr><tr><td>logging.logback.rollingpolicy.max-file-size</td><td>存档前，每个日志文件的最大大小（默认值：10MB）</td></tr><tr><td>logging.logback.rollingpolicy.total-size-cap</td><td>日志文件被删除之前，可以容纳的最大大小（默认值：0B）。设置1GB则磁盘存储超过 1GB 日志后就会删除旧日志文件</td></tr><tr><td>logging.logback.rollingpolicy.max-history</td><td>日志文件保存的最大天数(默认值：7).</td></tr><tr><td>logging.logback.rollingpolicy.file-name-pattern</td><td>日志存档的文件名格式（默认值：\${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz）</td></tr></tbody></table><h2 id="自定义配置文件" tabindex="-1"><a class="header-anchor" href="#自定义配置文件" aria-hidden="true">#</a> 自定义配置文件</h2><p>通常我们配置 <code>application.properties</code> 就够了。当然也可以自定义。比如：</p><table><thead><tr><th>日志系统</th><th>自定义</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml, logback-spring.groovy, logback.xml, or logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml or log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table><p>如果可能，建议在日志配置中使用<code>-spring</code> 变量（例如，<code>logback-spring.xml</code> 而不是 <code>logback.xml</code>）。如果使用标准配置文件，spring 无法完全控制日志初始化。</p><p>最佳实战：自己要写配置，配置文件名加上 <code>xx-spring.xml</code></p><h2 id="切换日志组合" tabindex="-1"><a class="header-anchor" href="#切换日志组合" aria-hidden="true">#</a> 切换日志组合</h2><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 使用其他的日志包时，需要排除spring的默认日志包 --&gt;</span>    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>log4j2</code>支持<code>yaml</code>和<code>json</code>格式的配置文件。</p><table><thead><tr><th>格式</th><th>依赖</th><th>文件名</th></tr></thead><tbody><tr><td>YAML</td><td><code>com.fasterxml.jackson.core:jackson-databind + com.fasterxml.jackson.dataformat:jackson-dataformat-yaml</code></td><td>log4j2.yaml + log4j2.yml</td></tr><tr><td>JSON</td><td><code>com.fasterxml.jackson.core:jackson-databind</code></td><td>log4j2.json + log4j2.jsn</td></tr></tbody></table><h2 id="小总结" tabindex="-1"><a class="header-anchor" href="#小总结" aria-hidden="true">#</a> 小总结</h2><ol><li>导入任何第三方框架，先排除它的日志包，因为Boot底层控制好了日志</li><li>修改 <code>application.properties</code> 配置文件，就可以调整日志的所有行为。如果不够，可以编写日志框架自己的配置文件放在类路径下就行，比如<code>logback-spring.xml</code>，<code>log4j2-spring.xml</code></li><li>如需对接<strong>专业日志系统</strong>，也只需要把 logback 记录的<strong>日志</strong>灌倒 <strong>kafka</strong>之类的中间件，这和SpringBoot没关系，都是日志框架自己的配置，<strong>修改配置文件即可</strong></li><li><strong>业务中使用slf4j-api记录日志。不要再 sout 了</strong></li></ol><h1 id="web开发" tabindex="-1"><a class="header-anchor" href="#web开发" aria-hidden="true">#</a> web开发</h1><h2 id="webmvcautoconfiguration-原理" tabindex="-1"><a class="header-anchor" href="#webmvcautoconfiguration-原理" aria-hidden="true">#</a> WebMvcAutoConfiguration 原理</h2><h3 id="生效条件" tabindex="-1"><a class="header-anchor" href="#生效条件" aria-hidden="true">#</a> 生效条件</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AutoConfiguration</span><span class="token punctuation">(</span>after <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token class-name">DispatcherServletAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">TaskExecutionAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
		<span class="token class-name">ValidationAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//在这些自动配置之后</span>
<span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">SERVLET</span><span class="token punctuation">)</span> <span class="token comment">//如果是web应用就生效，类型SERVLET、REACTIVE 响应式web</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">Servlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">WebMvcConfigurationSupport</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">//容器中没有这个Bean，才生效。默认就是没有</span>
<span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span><span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token constant">HIGHEST_PRECEDENCE</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//优先级</span>
<span class="token annotation punctuation">@ImportRuntimeHints</span><span class="token punctuation">(</span><span class="token class-name">WebResourcesRuntimeHints</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfiguration</span> <span class="token punctuation">{</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="效果" tabindex="-1"><a class="header-anchor" href="#效果" aria-hidden="true">#</a> 效果</h3><ol><li><p>放了两个Filter：</p></li><li><ol><li><code>HiddenHttpMethodFilter</code>；页面表单提交<code>Rest</code>请求（GET、POST、PUT、DELETE）</li><li><code>FormContentFilter</code>： 表单内容<code>Filter</code>，GET（数据放URL后面）、POST（数据放请求体）请求可以携带数据，PUT、DELETE 的请求体数据会被忽略</li></ol></li><li><p>给容器中放了<code>WebMvcConfigurer</code>组件；给SpringMVC添加各种定制功能</p></li><li><ol><li>所有的功能最终会和配置文件进行绑定</li><li>WebMvcProperties： <code>spring.mvc</code>配置文件</li><li>WebProperties： <code>spring.web</code>配置文件</li></ol></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">EnableWebMvcConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">//额外导入了其他配置</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">WebMvcProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">WebProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfigurationAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">,</span> <span class="token class-name">ServletContextAware</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="webmvcconfigurer接口" tabindex="-1"><a class="header-anchor" href="#webmvcconfigurer接口" aria-hidden="true">#</a> WebMvcConfigurer接口</h3><p>提供了配置SpringMVC底层的所有组件入口</p><figure><img src="`+u+`" alt="WebMvcConfigurer" tabindex="0" loading="lazy"><figcaption>WebMvcConfigurer</figcaption></figure><h3 id="静态资源规则源码" tabindex="-1"><a class="header-anchor" href="#静态资源规则源码" aria-hidden="true">#</a> 静态资源规则源码</h3><p><code>WebMvcAutoConfigurationAdapter.addResourceHandlers()</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Default resource handling disabled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//1、</span>
    <span class="token function">addResourceHandler</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getWebjarsPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">&quot;classpath:/META-INF/resources/webjars/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">addResourceHandler</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>registration<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        registration<span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>servletContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ServletContextResource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletContextResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>servletContext<span class="token punctuation">,</span> <span class="token constant">SERVLET_LOCATION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            registration<span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),F=t("<li><p>规则一：访问： <code>/webjars/**</code>路径就去 <code>classpath:/META-INF/resources/webjars/</code>下找资源.</p><ol><li>maven 导入依赖</li></ol></li><li><p>规则二：访问： <code>/**</code>路径就去 <code>静态资源默认的四个位置找资源</code></p><ol><li><code>classpath:/META-INF/resources/</code></li><li><code>classpath:/resources/</code></li><li><code>classpath:/static/</code></li><li><code>classpath:/public/</code></li><li>以上四个值，在<code>WebProperties</code>类的 <code>CLASSPATH_RESOURCE_LOCATIONS</code> 中。<code>&quot;classpath:/META-INF/resources/&quot;, &quot;classpath:/resources/&quot;, &quot;classpath:/static/&quot;, &quot;classpath:/public/&quot;</code></li></ol></li>",2),D=n("p",null,[s("规则三："),n("strong",null,"静态资源默认都有缓存规则的设置")],-1),B=n("li",null,[s("所有缓存的设置，直接通过"),n("strong",null,"配置文件"),s("： "),n("code",null,"spring.web")],-1),V=n("li",null,"cachePeriod： 缓存周期； 多久不用找服务器要新的。 默认没有，以s为单位",-1),X=n("strong",null,"HTTP缓存",-1),U={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching#%E6%A6%82%E8%A7%88",target:"_blank",rel:"noopener noreferrer"},z=n("li",null,[n("strong",null,"useLastModified"),s("：是否使用最后一次修改。配合HTTP Cache规则，默认"),n("code",null,"true")],-1),G=t('<blockquote><p>如果浏览器访问了一个静态资源 <code>index.js</code>，如果服务这个资源没有发生变化，下次访问的时候就可以直接让浏览器用自己缓存中的东西，而不用给服务器发请求。</p></blockquote><h4 id="实验" tabindex="-1"><a class="header-anchor" href="#实验" aria-hidden="true">#</a> 实验</h4><p>创建对应的静态资源</p><figure><img src="'+r+`" alt="image-20230720114813606" tabindex="0" loading="lazy"><figcaption>image-20230720114813606</figcaption></figure><p>分别访问：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://localhost:8080/webjars/jars.html
http://localhost:8080/public.html
http://localhost:8080/resources.html
http://localhost:8080/static.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="enablewebmvcconfiguration-源码" tabindex="-1"><a class="header-anchor" href="#enablewebmvcconfiguration-源码" aria-hidden="true">#</a> EnableWebMvcConfiguration 源码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// SpringBoot 给容器中放 WebMvcConfigurationSupport 组件。</span>
<span class="token comment">//我们如果自己放了 WebMvcConfigurationSupport 组件，Boot的WebMvcAutoConfiguration都会失效。</span>
<span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">WebProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EnableWebMvcConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">DelegatingWebMvcConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">ResourceLoaderAware</span> 
<span class="token punctuation">{</span>

    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p><code>XXXHandlerMapping</code>： 每一个 <code>handlerMapping</code> 的作用都是根据请求路径 <code> /XXX</code> 找哪个<code>handler</code>能处理请求</p></li><li><ol><li><code>WelcomePageHandlerMapping</code>：</li></ol></li><li><ol><li><ol><li>访问 <code>/**</code>路径下的所有请求，都在以前四个静态资源路径下找，欢迎页也一样</li><li>找<code>index.html</code>：只要静态资源的位置有一个 <code>index.html</code>页面，项目启动默认访问</li></ol></li></ol></li></ol><h3 id="为什么容器中放一个webmvcconfigurer就能配置底层行为" tabindex="-1"><a class="header-anchor" href="#为什么容器中放一个webmvcconfigurer就能配置底层行为" aria-hidden="true">#</a> 为什么容器中放一个<code>WebMvcConfigurer</code>就能配置底层行为</h3><ol><li><code>WebMvcAutoConfiguration</code> 是一个自动配置类，它里面有一个 <code>EnableWebMvcConfiguration</code></li><li><code>EnableWebMvcConfiguration</code>继承与 <code>DelegatingWebMvcConfiguration</code>，这两个都生效</li><li><code>DelegatingWebMvcConfiguration</code>利用 DI 把容器中 所有 <code>WebMvcConfigurer </code>注入进来</li><li>别人调用 <code>DelegatingWebMvcConfiguration</code> 的方法配置底层规则，而它调用所有 <code>WebMvcConfigurer</code>的配置底层方法。</li></ol><blockquote><p>同时可以参考后面的章节：web开发 &gt; 静态资源 &gt; 自定义静态资源规则 &gt; 代码方式</p></blockquote><h3 id="webmvcconfigurationsupport" tabindex="-1"><a class="header-anchor" href="#webmvcconfigurationsupport" aria-hidden="true">#</a> WebMvcConfigurationSupport</h3><p>提供了很多的默认设置。</p><p>判断系统中是否有相应的类：如果有，就加入相应的<code>HttpMessageConverter</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>jackson2Present <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token string">&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;</span><span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
				<span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token string">&quot;com.fasterxml.jackson.core.JsonGenerator&quot;</span><span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
jackson2XmlPresent <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token string">&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;</span><span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
jackson2SmilePresent <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token string">&quot;com.fasterxml.jackson.dataformat.smile.SmileFactory&quot;</span><span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="web场景" tabindex="-1"><a class="header-anchor" href="#web场景" aria-hidden="true">#</a> Web场景</h2><h3 id="自动配置" tabindex="-1"><a class="header-anchor" href="#自动配置" aria-hidden="true">#</a> 自动配置</h3><ol><li>整合web场景</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、引入了 <code>autoconfigure</code>功能</p><p>3、<code>@EnableAutoConfiguration</code>注解使用<code>@Import(AutoConfigurationImportSelector.class)</code>批量导入组件</p><p>4、加载 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> 文件中配置的所有组件</p><p>5、所有自动配置类如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration
org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration
====以下是响应式web场景和现在的没关系======
org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration
org.springframework.boot.autoconfigure.web.reactive.ReactiveMultipartAutoConfiguration
org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration
org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration
org.springframework.boot.autoconfigure.web.reactive.WebSessionIdResolverAutoConfiguration
org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration
org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration
org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration
================以上没关系=================
org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration
org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration
org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration
org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration
org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration
org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6、绑定了配置文件的一堆配置项</p><ul><li>1、SpringMVC的所有配置 <code>spring.mvc</code></li><li>2、Web场景通用配置 <code>spring.web</code></li><li>3、文件上传配置 <code>spring.servlet.multipart</code></li><li>4、服务器的配置 <code>server</code>: 比如：编码方式</li></ul><h3 id="默认效果" tabindex="-1"><a class="header-anchor" href="#默认效果" aria-hidden="true">#</a> 默认效果</h3><p>默认配置：</p><ol><li>包含了 <code>ContentNegotiatingViewResolver</code> 和 <code>BeanNameViewResolver</code> 组件，方便视图解析</li><li>默认的静态资源处理机制： 静态资源放在 <code>static</code> 文件夹下即可直接访问</li><li>自动注册了 <code>Converter,GenericConverter,Formatter</code>组件，适配常见数据类型转换和格式化需求</li><li>支持 <code>HttpMessageConverters</code>，可以方便返回<code>json</code>等数据类型</li><li>注册 <code>MessageCodesResolver</code>，方便国际化及错误消息处理</li><li><strong>支持 静态</strong> index.html</li><li><strong>自动使用</strong><code>ConfigurableWebBindingInitializer</code>，实现消息处理、数据绑定、类型转化、数据校验等功能。</li></ol><p><strong>重要：</strong></p><ul><li>如果想保持 <code>boot mvc</code> 的默认配置，并且自定义更多的 mvc 配置，如：<strong>interceptors</strong>, <strong>formatters</strong>,<strong>view controllers</strong> 等。可以使用**@Configuration**注解添加一个 <code>WebMvcConfigurer</code> 类型的配置类，并不要标注 <em>@EnableWebMvc</em></li><li>如果想保持 <code>boot mvc</code> 的默认配置，但要自定义核心组件实例，比如：<code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, 或<code>ExceptionHandlerExceptionResolver</code>，给容器中放一个 <code>WebMvcRegistrations</code> 组件即可。</li><li>如果想全面接管 <code>Spring MVC</code>，<code>@Configuration</code> 标注一个配置类，并加上<code>@EnableWebMvc</code>注解，实现 <code>WebMvcConfigurer</code> 接口</li></ul><h2 id="静态资源" tabindex="-1"><a class="header-anchor" href="#静态资源" aria-hidden="true">#</a> 静态资源</h2><h3 id="默认规则" tabindex="-1"><a class="header-anchor" href="#默认规则" aria-hidden="true">#</a> 默认规则</h3><p>静态资源映射规则在 <code>WebMvcAutoConfiguration</code> 中进行了定义：</p><ol><li><p><code>http://localhost:8080/webjars/**</code> 的所有路径资源都在 <code>classpath:/META-INF/resources/webjars/</code></p></li><li><p><code>/**</code> 的所有路径资源都在 <code>classpath:/META-INF/resources/、classpath:/resources/、classpath:/static/、classpath:/public/</code></p></li><li><p>所有静态资源都定义了<strong>缓存规则</strong>。【浏览器访问过一次，就会缓存一段时间】，但此功能参数<strong>无默认值</strong></p><ul><li>period： 缓存间隔。 默认 0s；</li><li>cacheControl：缓存控制。 默认无；</li><li>useLastModified：是否使用lastModified头。 默认为 true</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// WebProperties.java</span>
<span class="token keyword">class</span> <span class="token class-name">Cache</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> useLastModified <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="欢迎页" tabindex="-1"><a class="header-anchor" href="#欢迎页" aria-hidden="true">#</a> 欢迎页</h3><p>欢迎页规则在 <code>WebMvcAutoConfiguration</code> 中进行了定义：</p><ol><li>在<strong>静态资源</strong>目录下找 <code>index.html</code></li><li>没有就在 <code>templates</code>下找<code>index</code>模板页</li></ol><h3 id="favicon" tabindex="-1"><a class="header-anchor" href="#favicon" aria-hidden="true">#</a> Favicon</h3><ol><li>在静态资源目录下找 <code>favicon.ico</code></li></ol><h3 id="缓存实验" tabindex="-1"><a class="header-anchor" href="#缓存实验" aria-hidden="true">#</a> 缓存实验</h3><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">9000</span>

<span class="token comment">#1、spring.web：</span>
<span class="token comment"># 1.配置国际化的区域信息</span>
<span class="token comment"># 2.静态资源策略(开启、处理链、缓存)</span>

<span class="token comment">#开启静态资源映射规则 (默认就是 true)</span>
<span class="token key attr-name">spring.web.resources.add-mappings</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>

<span class="token comment">#设置缓存	</span>
<span class="token comment">#spring.web.resources.cache.period=3600</span>
<span class="token comment">## 缓存详细合并项控制，覆盖period配置：</span>
<span class="token comment">## 浏览器第一次请求服务器，服务器告诉浏览器此资源缓存7200秒，7200秒以内的所有此资源访问不用发给服务器请求，7200秒以后发请求给服务器</span>
<span class="token key attr-name">spring.web.resources.cache.cachecontrol.max-age</span><span class="token punctuation">=</span><span class="token value attr-value">7200</span>
<span class="token comment">#使用资源 last-modified 时间，来对比服务器和浏览器的资源是否相同没有变化。相同返回 304</span>
<span class="token key attr-name">spring.web.resources.cache.use-last-modified</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义静态资源规则" tabindex="-1"><a class="header-anchor" href="#自定义静态资源规则" aria-hidden="true">#</a> 自定义静态资源规则</h3><blockquote><p>自定义静态资源路径、自定义缓存规则</p></blockquote><h4 id="配置方式" tabindex="-1"><a class="header-anchor" href="#配置方式" aria-hidden="true">#</a> 配置方式</h4><p><code>spring.mvc</code>： 静态资源访问前缀路径</p><p><code>spring.web</code>：</p><ul><li>静态资源目录</li><li>静态资源缓存策略</li></ul><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#1、spring.web：</span>
<span class="token comment"># 1.配置国际化的区域信息</span>
<span class="token comment"># 2.静态资源策略(开启、处理链、缓存)</span>

<span class="token comment">#开启静态资源映射规则</span>
<span class="token key attr-name">spring.web.resources.add-mappings</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>

<span class="token comment">#设置缓存</span>
<span class="token key attr-name">spring.web.resources.cache.period</span><span class="token punctuation">=</span><span class="token value attr-value">3600</span>
<span class="token comment">##缓存详细合并项控制，覆盖period配置：</span>
<span class="token comment">## 浏览器第一次请求服务器，服务器告诉浏览器此资源缓存7200秒，7200秒以内的所有此资源访问不用发给服务器请求，7200秒以后发请求给服务器</span>
<span class="token key attr-name">spring.web.resources.cache.cachecontrol.max-age</span><span class="token punctuation">=</span><span class="token value attr-value">7200</span>
<span class="token comment">## 共享缓存</span>
<span class="token key attr-name">spring.web.resources.cache.cachecontrol.cache-public</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token comment">#使用资源 last-modified 时间，来对比服务器和浏览器的资源是否相同没有变化。相同返回 304</span>
<span class="token key attr-name">spring.web.resources.cache.use-last-modified</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>

<span class="token comment">#自定义静态资源文件夹位置</span>
<span class="token key attr-name">spring.web.resources.static-locations</span><span class="token punctuation">=</span><span class="token value attr-value">classpath:/a/,classpath:/b/,classpath:/static/</span>

<span class="token comment">#2、 spring.mvc</span>
<span class="token comment">## 2.1. 自定义webjars路径前缀</span>
<span class="token key attr-name">spring.mvc.webjars-path-pattern</span><span class="token punctuation">=</span><span class="token value attr-value">/wj/**</span>
<span class="token comment">## 2.2. 静态资源访问路径前缀</span>
<span class="token key attr-name">spring.mvc.static-path-pattern</span><span class="token punctuation">=</span><span class="token value attr-value">/static/**</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码方式" tabindex="-1"><a class="header-anchor" href="#代码方式" aria-hidden="true">#</a> 代码方式</h4><ul><li>容器中只要有一个 WebMvcConfigurer 组件。配置的底层行为都会生效</li><li>@EnableWebMvc //禁用boot的默认配置</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span> <span class="token comment">//这是一个配置类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//保留以前规则</span>
        <span class="token comment">//自己写新的规则。</span>
        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/static/**&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/a/&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;classpath:/b/&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span><span class="token class-name">CacheControl</span><span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">1180</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>非继承方式</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span> <span class="token comment">//这是一个配置类,给容器中放一个 WebMvcConfigurer 组件，就能自定义底层</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span>  <span class="token comment">/*implements WebMvcConfigurer*/</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token function">webMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/static/**&quot;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/a/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath:/b/&quot;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span><span class="token class-name">CacheControl</span><span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">1180</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>为什么为容器添加一个 WebMvcConfigurer 就可以自定义底层？</p><p>我们配置的 WebMvcConfigurer 最终是在什么地方调用？</p></blockquote><ul><li><code>EnableWebMvcConfiguration</code> 类在加载时，其父类 <code>DelegatingWebMvcConfiguration</code> 也会被加载。</li><li><code>DelegatingWebMvcConfiguration</code> 中存在如下方法，会将所有的<code>WebMVCConfiguration</code>，加入 <code>WebMvcConfigurerComposite</code>中的<code>List</code>。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">WebMvcConfigurerComposite</span> configurers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurerComposite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>
    required <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConfigurers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">&gt;</span></span> configurers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>configurers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>configurers<span class="token punctuation">.</span><span class="token function">addWebMvcConfigurers</span><span class="token punctuation">(</span>configurers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>DelegatingWebMvcConfiguration</code>调用 <code>WebMvcConfigurerComposite</code> 提供的各种方法，调用所有 <code>WebMVCConfiguration</code> 子类的实现。如下：只要我们配置了 <code>WebMCVconfiguration</code>，并且重写了其中的方法，<strong>注意点 1</strong>最终会调用重写的方法。完成自定义的配置。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfigurerComposite</span><span class="token punctuation">{</span>
    <span class="token comment">/* 省略其他方法 */</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WebMvcConfigurer</span> delegate <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			delegate<span class="token punctuation">.</span><span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 注意点 1</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>    
    <span class="token comment">/* 省略其他方法 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路径匹配" tabindex="-1"><a class="header-anchor" href="#路径匹配" aria-hidden="true">#</a> 路径匹配</h2><p><strong>Spring5.3</strong> 之后加入了更多的请求路径匹配的实现策略；</p><p>以前只支持 <code>AntPathMatcher</code> 策略, 现在提供了 <strong>PathPatternParser</strong> 策略。并且可以让我们指定到底使用那种策略。</p><h3 id="ant风格路径用法" tabindex="-1"><a class="header-anchor" href="#ant风格路径用法" aria-hidden="true">#</a> Ant风格路径用法</h3><p>Ant 风格的路径模式语法具有以下规则：</p><ul><li>*：表示<strong>任意数量</strong>的字符。</li><li>?：表示任意<strong>一个字符</strong>。</li><li>**：表示任意数量的目录。</li><li>{}：表示一个命名的模式<strong>占位符</strong>。</li><li>[]：表示<strong>字符集合</strong>，例如[a-z]表示小写字母。</li></ul><p>例如：</p><ul><li><code>*.html</code> 匹配任意名称，扩展名为<code>.html</code>的文件。</li><li><code>/folder1/*/*.java</code> 匹配在<code>folder1</code>目录下的任意两级目录下的<code>.java</code>文件。</li><li><code>/folder2/**/*.jsp</code> 匹配在<code>folder2</code>目录下任意目录深度的<code>.jsp</code>文件。</li><li><code>/{type}/{id}.html</code> 匹配任意文件名为{id}.html，在任意命名的<code>{type}</code>目录下的文件。</li></ul><p>注意：Ant 风格的路径模式语法中的特殊字符需要转义，如：</p><ul><li>要匹配文件路径中的星号，则需要转义为\\*。</li><li>要匹配文件路径中的问号，则需要转义为\\?。</li></ul><h3 id="模式切换" tabindex="-1"><a class="header-anchor" href="#模式切换" aria-hidden="true">#</a> 模式切换</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>AntPathMatcher 与 PathPatternParser
● PathPatternParser 在 jmh 基准测试下，有 6~8 倍吞吐量提升，降低 30%~40%空间分配率
● PathPatternParser 兼容 AntPathMatcher语法，并支持更多类型的路径模式
● PathPatternParser  &quot;**&quot; 多段匹配的支持仅允许在模式末尾使用
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * a* 表示以a开头，后面任意多个字符，也可以没有
     * b? 表示以b开头，后面跟一个字符
     * <span class="token punctuation">{</span>p1:[z-f]+<span class="token punctuation">}</span> 代表，a-f 中的字符至少有一个以上，不能没有，且不能超范围
     * <span class="token keyword">@param</span> <span class="token parameter">request</span>
     * <span class="token keyword">@param</span> <span class="token parameter">path</span>
     * <span class="token keyword">@return</span>
     */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/a*/b?/{p1:[a-f]+}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>
                    <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;p1&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;路径变量p1： {}&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取请求路径</span>
    <span class="token class-name">String</span> uri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> uri<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p><ul><li>使用默认的路径匹配规则，是由 <code>PathPatternParser</code> 提供的</li><li>如果路径中间需要有 <code>**</code>，替换成<code>ant</code>风格路径。</li></ul><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 改变路径匹配策略：</span>
<span class="token comment"># ant_path_matcher 老版策略；</span>
<span class="token comment"># path_pattern_parser 新版策略；</span>
<span class="token key attr-name">spring.mvc.pathmatch.matching-strategy</span><span class="token punctuation">=</span><span class="token value attr-value">ant_path_matcher</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以查看配置是如何生效。前缀为 <code>spring.mvc</code>，那么该配置就在 <code>WebMvcProperties</code> 中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// WebMvcAutoConfigurationAdapter.java</span>
<span class="token comment">// 由于默认支持  path_pattern_parser</span>
<span class="token comment">// 这里只需要判断是否配置了  ANT_PATH_MATCHER</span>
<span class="token annotation punctuation">@Override</span> 
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configurePathMatch</span><span class="token punctuation">(</span><span class="token class-name">PathMatchConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getPathmatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getMatchingStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">WebMvcProperties<span class="token punctuation">.</span>MatchingStrategy</span><span class="token punctuation">.</span><span class="token constant">ANT_PATH_MATCHER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        configurer<span class="token punctuation">.</span><span class="token function">setPathMatcher</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AntPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dispatcherServletPath<span class="token punctuation">.</span><span class="token function">ifAvailable</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dispatcherPath<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> servletUrlMapping <span class="token operator">=</span> dispatcherPath<span class="token punctuation">.</span><span class="token function">getServletUrlMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>servletUrlMapping<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">singleDispatcherServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">UrlPathHelper</span> urlPathHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlPathHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                urlPathHelper<span class="token punctuation">.</span><span class="token function">setAlwaysUseFullPath</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                configurer<span class="token punctuation">.</span><span class="token function">setUrlPathHelper</span><span class="token punctuation">(</span>urlPathHelper<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内容协商" tabindex="-1"><a class="header-anchor" href="#内容协商" aria-hidden="true">#</a> 内容协商</h2><p>我们进行<code>web</code>开发时，现在一般都是设计成<code>RESTful</code>风格的<code>url</code>。如果此时我们希望在请求同一个<code>RESTful</code>的URL时，得到不同的PDF视图、<code>JSON</code>视图、<code>Html</code>视图，也就是说我们需要对同一个<code>url</code>返回多种不同的结果，这该如何实现？</p><blockquote><p>一套系统适配<strong>多端数据</strong>返回。</p></blockquote><figure><img src="`+d+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="多端内容适配" tabindex="-1"><a class="header-anchor" href="#多端内容适配" aria-hidden="true">#</a> 多端内容适配</h3><h4 id="默认规则-1" tabindex="-1"><a class="header-anchor" href="#默认规则-1" aria-hidden="true">#</a> 默认规则</h4><ul><li><p>基于请求头的内容协商（默认开启）</p><ul><li>客户端向服务端发送请求，携带HTTP标准的<strong>Accept请求头</strong>。</li><li>Accept: <code>application/json、text/xml、text/yaml</code></li><li>服务端根据客户端<strong>请求头期望的数据类型</strong>进行<strong>动态返回</strong></li></ul></li><li><p>基于<strong>请求参数</strong>内容协商：（需要开启）</p><ul><li>发送请求 <code>GET /projects/spring-boot?format=json</code></li><li>匹配到 <code>@GetMapping(&quot;/projects/spring-boot&quot;)</code></li><li>根据参数协商，优先返回 <code>json</code> 类型数据【需要开启参数匹配设置】</li><li>发送请求 <code>GET /projects/spring-boot?format=xml,</code>优先返回 <code>xml</code> 类型数据</li></ul></li></ul><h4 id="效果演示" tabindex="-1"><a class="header-anchor" href="#效果演示" aria-hidden="true">#</a> 效果演示</h4><p>请求同一个接口，可以返回json和xml不同格式数据</p><ul><li>加入依赖</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.dataformat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-dataformat-xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>开启配置</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span> 
  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>
    <span class="token key atrule">contentnegotiation</span><span class="token punctuation">:</span>
      <span class="token comment"># 是否应该使用请求参数来确定请求的 media type （默认 false）</span>
      <span class="token key atrule">favor-parameter</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// get: /demo02?format=json</span>
<span class="token comment">// get: /demo02?format=xml</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/demo02&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">controllerTest02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> student<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>结果</li></ul><figure><img src="`+k+`" alt="image-20230720153732111" tabindex="0" loading="lazy"><figcaption>image-20230720153732111</figcaption></figure><h4 id="配置协商规则与支持类型" tabindex="-1"><a class="header-anchor" href="#配置协商规则与支持类型" aria-hidden="true">#</a> 配置协商规则与支持类型</h4><ol><li>修改<strong>内容协商方式</strong></li></ol><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#使用参数进行内容协商</span>
<span class="token key attr-name">spring.mvc.contentnegotiation.favor-parameter</span><span class="token punctuation">=</span><span class="token value attr-value">true  </span>
<span class="token comment">#自定义参数名，默认为format</span>
<span class="token key attr-name">spring.mvc.contentnegotiation.parameter-name</span><span class="token punctuation">=</span><span class="token value attr-value">myparam </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>大多数 MediaType 都是开箱即用的。也可以<strong>自定义内容类型，如：</strong></li></ol><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.mvc.contentnegotiation.media-types.yaml</span><span class="token punctuation">=</span><span class="token value attr-value">text/yaml</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="自定义内容返回" tabindex="-1"><a class="header-anchor" href="#自定义内容返回" aria-hidden="true">#</a> 自定义内容返回</h3><h4 id="增加yaml返回支持" tabindex="-1"><a class="header-anchor" href="#增加yaml返回支持" aria-hidden="true">#</a> 增加yaml返回支持</h4><ul><li>导入依赖</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.dataformat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-dataformat-yaml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>把对象写出成YAML</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/demo03&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">controllerTest03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">YAMLFactory</span> yamlFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YAMLFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token class-name">YAMLGenerator<span class="token punctuation">.</span>Feature</span><span class="token punctuation">.</span><span class="token constant">WRITE_DOC_START_MARKER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span>yamlFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>编写配置</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>
    <span class="token key atrule">contentnegotiation</span><span class="token punctuation">:</span>
      <span class="token comment"># 是否应该使用请求参数来确定请求的 media type （默认 false）</span>
      <span class="token key atrule">favor-parameter</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">media-types</span><span class="token punctuation">:</span>
        <span class="token key atrule">yaml</span><span class="token punctuation">:</span> <span class="token string">&quot;text/yaml&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自定义一个 <code>YamlMessageConverter</code> 组件</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyYamlMessageConverter</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断是否可以支持转为 Yaml ，</span>
        <span class="token comment">// 一般除了基本类型都可以转，</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">MyYamlMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 指定 MyYamlMessageConverter 支持的 yaml 类型</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MediaType</span><span class="token punctuation">(</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;yaml&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;开始初始化，并设置 text/yaml 成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">YAMLFactory</span> yamlFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YAMLFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token class-name">YAMLGenerator<span class="token punctuation">.</span>Feature</span><span class="token punctuation">.</span><span class="token constant">WRITE_DOC_START_MARKER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span>yamlFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;完成初始化&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Override</span>  <span class="token comment">// 用于浏览器传到后端的对象解析 辅助 @RequestBody</span>
    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">readInternal</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">HttpInputMessage</span> inputMessage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMessageNotReadableException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    
    <span class="token annotation punctuation">@Override</span>  <span class="token comment">// 用于后端对象解析传递到前端 辅助 @ResponseBody</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">writeInternal</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">HttpOutputMessage</span> outputMessage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMessageNotWritableException</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;开始将对象{}，转换为yaml&quot;</span><span class="token punctuation">,</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out <span class="token operator">=</span> outputMessage<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>objectMapper<span class="token punctuation">.</span><span class="token function">writeValue</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;转换完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置一个<code>WebMvcConfigurer</code>用来增加<code>MyYamlMessageConverter</code>组件，专门负责把对象写出为yaml格式。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseConfiguration</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token function">webMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyYamlMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>controller</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// get: /demo03?format=yaml</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/demo02&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">controllerTest02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> student<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>结果</li></ul><figure><img src="`+v+'" alt="image-20230720172757271" tabindex="0" loading="lazy"><figcaption>image-20230720172757271</figcaption></figure><h4 id="思考-如何增加其他" tabindex="-1"><a class="header-anchor" href="#思考-如何增加其他" aria-hidden="true">#</a> 思考：如何增加其他</h4><ul><li><p>配置媒体类型支持:</p></li><li><ul><li><code>spring.mvc.contentnegotiation.media-types.yaml=text/yaml</code></li></ul></li><li><p>编写对应的<code>HttpMessageConverter</code>，要告诉Boot这个支持的媒体类型</p></li><li><ul><li>按照上面的示例</li></ul></li><li><p>把<code>MessageConverter</code>组件加入到底层</p></li><li><ul><li>容器中放一个<code>WebMvcConfigurer</code> 组件，并配置底层的<code>MessageConverter</code></li></ul></li></ul><h4 id="httpmessageconverter的示例写法" tabindex="-1"><a class="header-anchor" href="#httpmessageconverter的示例写法" aria-hidden="true">#</a> HttpMessageConverter的示例写法</h4><ul><li>参考上述例子</li></ul><h3 id="内容协商原理-httpmessageconverter" tabindex="-1"><a class="header-anchor" href="#内容协商原理-httpmessageconverter" aria-hidden="true">#</a> 内容协商原理-<code>HttpMessageConverter</code></h3><blockquote><p><code>HttpMessageConverter</code> 怎么工作？合适工作？</p><p>定制 <code>HttpMessageConverter</code> 来实现多端内容协商</p><p>编写<code>WebMvcConfigurer</code>提供的<code>configureMessageConverters</code>底层，修改底层的<code>MessageConverter</code></p></blockquote><h4 id="_1-responsebody由httpmessageconverter处理" tabindex="-1"><a class="header-anchor" href="#_1-responsebody由httpmessageconverter处理" aria-hidden="true">#</a> 1.<code>@ResponseBody</code>由<code>HttpMessageConverter</code>处理</h4><p>标注了<code>@ResponseBody</code>的返回值 将会由支持它的 <code>HttpMessageConverter</code>写给浏览器</p><ol><li><p>如果<code>controller</code>方法的返回值标注了 <code>@ResponseBody </code>注解</p></li><li><ol><li>请求进来先来到<code>DispatcherServlet</code>的<code>doDispatch()</code>进行处理</li><li>找到一个 <code>HandlerAdapter </code>适配器。利用适配器执行目标方法</li><li><code>RequestMappingHandlerAdapter</code>来执行，调用<code>invokeHandlerMethod（）</code>来执行目标方法</li><li>目标方法执行之前，准备好两个东西</li></ol></li><li><ol><li><ol><li><code>HandlerMethodArgumentResolver</code>：参数解析器，确定目标方法每个参数值</li><li><code>HandlerMethodReturnValueHandler</code>：返回值处理器，确定目标方法的返回值要怎么处理</li></ol></li></ol></li><li><ol start="5"><li><code>RequestMappingHandlerAdapter</code> 里面的<code>invokeAndHandle()</code>真正执行目标方法</li><li>目标方法执行完成，会返回<strong>返回值对象</strong></li><li>找到一个合适的返回值处理器 <code>HandlerMethodReturnValueHandler</code></li><li>最终找到 <code>RequestResponseBodyMethodProcessor</code>能处理 标注了 <code>@ResponseBody</code>注解的方法</li><li><code>RequestResponseBodyMethodProcessor</code> 调用<code>writeWithMessageConverters </code>,利用<code>MessageConverter</code>把返回值写出去</li></ol></li></ol><p>上面解释：<code>@ResponseBody</code>由<code>HttpMessageConverter</code>处理</p><ol><li><p><code>HttpMessageConverter</code> 会<strong>先进行内容协商</strong></p></li><li><ol><li>遍历所有的<code>MessageConverter</code>看谁支持这种<strong>内容类型的数据</strong></li><li>默认<code>MessageConverter</code>有以下</li></ol></li><li><figure><img src="'+g+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></li><li><ol><li>最终因为要<code>json</code>所以<code>MappingJackson2HttpMessageConverter</code>支持写出json</li><li>jackson用<code>ObjectMapper</code>把对象写出去</li></ol></li></ol><h4 id="_2-webmvcautoconfiguration提供几种默认httpmessageconverters" tabindex="-1"><a class="header-anchor" href="#_2-webmvcautoconfiguration提供几种默认httpmessageconverters" aria-hidden="true">#</a> 2. <code>WebMvcAutoConfiguration</code>提供几种默认<code>HttpMessageConverters</code></h4><ul><li><p><code>EnableWebMvcConfiguration</code>通过 <code>addDefaultHttpMessageConverters</code>添加了默认的<code>MessageConverter</code>；如下：</p></li><li><ul><li><code>ByteArrayHttpMessageConverter</code>： 支持字节数据读写</li><li><code>StringHttpMessageConverter</code>： 支持字符串读写</li><li><code>ResourceHttpMessageConverter</code>：支持资源读写</li><li><code>ResourceRegionHttpMessageConverter</code>: 支持分区资源写出</li><li><code>AllEncompassingFormHttpMessageConverter</code>：支持表单xml/json读写</li><li><code>MappingJackson2HttpMessageConverter</code>： 支持请求响应体Json读写</li></ul></li></ul><figure><img src="'+m+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>系统提供默认的<code>MessageConverter</code> 功能有限，仅用于<code>json</code>或者普通返回数据。额外增加新的内容协商功能，必须增加新的<code>HttpMessageConverter</code></p><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h3>',131),J={href:"https://www.yuque.com/leifengyang/springboot3/wp5l9qbu1k64frz1#v1tQl",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://zhuanlan.zhihu.com/p/115891808",target:"_blank",rel:"noopener noreferrer"},$=t('<h2 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理" aria-hidden="true">#</a> 错误处理</h2><h3 id="默认机制" tabindex="-1"><a class="header-anchor" href="#默认机制" aria-hidden="true">#</a> 默认机制</h3><p><strong>错误处理的自动配置</strong>都在<code>ErrorMvcAutoConfiguration</code>中，两大核心机制：</p><ol><li>SpringBoot 会<strong>自适应</strong>处理错误，响应页面或<code>JSON</code>数据</li><li><strong>SpringMVC的错误处理机制</strong>依然保留，<strong>MVC处理不了</strong>，才会<strong>交给boot进行处理</strong></li></ol><figure><img src="'+b+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><code>server.error</code> 包含的配置。</p><figure><img src="'+h+`" alt="image-20230720201827187" tabindex="0" loading="lazy"><figcaption>image-20230720201827187</figcaption></figure><ul><li>发生错误以后，转发给/error路径，SpringBoot在底层写好一个 BasicErrorController的组件，专门处理这个请求</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_HTML_VALUE</span><span class="token punctuation">)</span> <span class="token comment">//返回HTML</span>
<span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">errorHtml</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">HttpStatus</span> status <span class="token operator">=</span> <span class="token function">getStatus</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> model <span class="token operator">=</span> <span class="token class-name">Collections</span>
        <span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span><span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token function">getErrorAttributeOptions</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_HTML</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ModelAndView</span> modelAndView <span class="token operator">=</span> <span class="token function">resolveErrorView</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> status<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>modelAndView <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> modelAndView <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@RequestMapping</span>  <span class="token comment">//返回 ResponseEntity, JSON</span>
<span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">HttpStatus</span> status <span class="token operator">=</span> <span class="token function">getStatus</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">NO_CONTENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> body <span class="token operator">=</span> <span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token function">getErrorAttributeOptions</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">ALL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>错误页面是这么解析到的</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1、解析错误的自定义视图地址</span>
<span class="token class-name">ModelAndView</span> modelAndView <span class="token operator">=</span> <span class="token function">resolveErrorView</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> status<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2、如果解析不到错误页面的地址，默认的错误页就是 error</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span>modelAndView <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> modelAndView <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>容器中专门有一个错误视图解析器</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span><span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">ErrorViewResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token class-name">DefaultErrorViewResolver</span> <span class="token function">conventionErrorViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultErrorViewResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resources<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>SpringBoot解析自定义错误页的默认规则</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolveErrorView</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span> status<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ModelAndView</span> modelAndView <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>modelAndView <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">SERIES_VIEWS</span><span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        modelAndView <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">SERIES_VIEWS</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">String</span> viewName<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> errorViewName <span class="token operator">=</span> <span class="token string">&quot;error/&quot;</span> <span class="token operator">+</span> viewName<span class="token punctuation">;</span>
    <span class="token class-name">TemplateAvailabilityProvider</span> provider <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>templateAvailabilityProviders<span class="token punctuation">.</span><span class="token function">getProvider</span><span class="token punctuation">(</span>errorViewName<span class="token punctuation">,</span>
                                                                                           <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>provider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span>errorViewName<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">resolveResource</span><span class="token punctuation">(</span>errorViewName<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolveResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> viewName<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> location <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resources<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
            resource <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">createRelative</span><span class="token punctuation">(</span>viewName <span class="token operator">+</span> <span class="token string">&quot;.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HtmlResourceView</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>容器中有一个默认的名为 error 的 view； 提供了默认白页功能</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">defaultErrorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultErrorView<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装了JSON格式的错误信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">ErrorAttributes</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> search <span class="token operator">=</span> <span class="token class-name">SearchStrategy</span><span class="token punctuation">.</span><span class="token constant">CURRENT</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">DefaultErrorAttributes</span> <span class="token function">errorAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultErrorAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>规则：</p><ol><li><p><strong>解析一个错误页</strong></p><ol><li><p>如果发生了500、404、503、403 这些错误</p></li><li><p>如果有<strong>模板引擎</strong>，默认在 <code>classpath:/templates/error/**精确码.html**</code></p></li><li><p>如果没有模板引擎，在静态资源文件夹下找 <code>**精确码.html**</code></p></li></ol></li><li><p>如果匹配不到<code>精确码.html</code>这些精确的错误页，就去找<code>5xx.html</code>，<code>4xx.html</code><strong>模糊匹配</strong></p><ol><li>如果有模板引擎，默认在 <code>classpath:/templates/error/5xx.html</code></li><li>如果没有模板引擎，在静态资源文件夹下找 <code>5xx.html</code></li></ol></li><li><p>如果模板引擎路径<code>templates</code>下有 <code>error.html</code>页面，就直接渲染</p></li></ol><h3 id="自定义错误响应" tabindex="-1"><a class="header-anchor" href="#自定义错误响应" aria-hidden="true">#</a> 自定义错误响应</h3><h4 id="自定义json响应" tabindex="-1"><a class="header-anchor" href="#自定义json响应" aria-hidden="true">#</a> 自定义json响应</h4><p>使用<code>@ControllerAdvice + @ExceptionHandler</code> 进行统一异常处理</p><h4 id="自定义页面响应" tabindex="-1"><a class="header-anchor" href="#自定义页面响应" aria-hidden="true">#</a> 自定义页面响应</h4><p>根据boot的错误页面规则，自定义页面模板</p><h4 id="最佳实战" tabindex="-1"><a class="header-anchor" href="#最佳实战" aria-hidden="true">#</a> 最佳实战</h4><ul><li><p><strong>前后分离</strong></p></li><li><ul><li>后台发生的所有错误，<code>@ControllerAdvice + @ExceptionHandler</code>进行统一异常处理。</li></ul></li><li><p><strong>服务端页面渲染</strong></p></li><li><ul><li><strong>不可预知的一些，HTTP码表示的服务器或客户端错误</strong></li></ul></li><li><ul><li><ul><li>给<code>classpath:/templates/error/</code>下面，放常用精确的错误码页面。<code>500.html</code>，<code>404.html</code></li><li>给<code>classpath:/templates/error/</code>下面，放通用模糊匹配的错误码页面。 <code>5xx.html</code>，<code>4xx.html</code></li></ul></li></ul></li><li><ul><li><strong>发生业务错误</strong></li></ul></li><li><ul><li><ul><li><strong>核心业务</strong>，每一种错误，都应该代码控制，<strong>跳转到自己定制的错误页</strong>。</li><li><strong>通用业务</strong>，<code>classpath:/templates/error.html</code>页面，<strong>显示错误信息</strong>。</li></ul></li></ul></li></ul><p>页面，<code>JSON</code>，可用的<code>Model</code>（Model and View）数据如下：</p><figure><img src="`+f+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>BasicErrorController
# 
@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)
# 输出 application/problem+json 的错误模式
spring.mvc.problemdetails.enabled = true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="嵌入式容器" tabindex="-1"><a class="header-anchor" href="#嵌入式容器" aria-hidden="true">#</a> 嵌入式容器</h2><p><strong>Servlet容器</strong>：管理、运行<strong>Servlet组件</strong>（Servlet、Filter、Listener）的环境，一般指<strong>服务器</strong></p><h3 id="自动配置原理" tabindex="-1"><a class="header-anchor" href="#自动配置原理" aria-hidden="true">#</a> 自动配置原理</h3><ul><li>SpringBoot 默认嵌入<code>Tomcat</code>作为<code>Servlet</code>容器。</li><li><strong>自动配置类</strong>是<code>ServletWebServerFactoryAutoConfiguration</code>，<code>EmbeddedWebServerFactoryCustomizerAutoConfiguration</code></li><li>自动配置类开始分析功能。<code>xxxxAutoConfiguration</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AutoConfiguration</span>
<span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span><span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token constant">HIGHEST_PRECEDENCE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">SERVLET</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">ServerProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">ServletWebServerFactoryAutoConfiguration<span class="token punctuation">.</span>BeanPostProcessorsRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
		<span class="token class-name">ServletWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedTomcat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
		<span class="token class-name">ServletWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedJetty</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
		<span class="token class-name">ServletWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedUndertow</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletWebServerFactoryAutoConfiguration</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p><code>ServletWebServerFactoryAutoConfiguration</code> 自动配置了嵌入式容器场景</p></li><li><p>绑定了<code>ServerProperties</code>配置类，所有和服务器有关的配置 <code>server</code></p></li><li><p><code>ServletWebServerFactoryAutoConfiguration</code> 导入了 嵌入式的三大服务器 <code>Tomcat</code>、<code>Jetty</code>、<code>Undertow</code></p></li><li><ol><li>导入 <code>Tomcat</code>、<code>Jetty</code>、<code>Undertow</code> 都有条件注解。系统中有这个类才行（也就是导了包）</li><li>默认 <code>Tomcat</code>配置生效。给容器中放 TomcatServletWebServerFactory</li><li>都给容器中 <code>ServletWebServerFactory</code>放了一个 <strong>web服务器工厂（造web服务器的）</strong></li><li><strong>web服务器工厂 都有一个功能，</strong><code>getWebServer</code>获取web服务器</li><li>TomcatServletWebServerFactory 创建了 tomcat。</li></ol></li><li><p>ServletWebServerFactory 什么时候会创建 webServer出来。</p></li><li><p><code>ServletWebServerApplicationContext</code>ioc容器，启动的时候会调用创建web服务器</p></li><li><p>Spring**容器刷新（启动）**的时候，会预留一个时机，刷新子容器。<code>onRefresh()</code></p></li><li><p>refresh() 容器刷新 十二大步的刷新子容器会调用 <code>onRefresh()</code>；</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">createWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to start web server&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Web场景的Spring容器启动，在onRefresh的时候，会调用创建web服务器的方法。</p><p>Web服务器的创建是通过WebServerFactory搞定的。容器中又会根据导了什么包条件注解，启动相关的 服务器配置，默认<code>EmbeddedTomcat</code>会给容器中放一个 <code>TomcatServletWebServerFactory</code>，导致项目启动，自动创建出Tomcat。</p></blockquote><h3 id="自定义" tabindex="-1"><a class="header-anchor" href="#自定义" aria-hidden="true">#</a> 自定义</h3><figure><img src="`+y+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-api.version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-api.version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- Exclude the Tomcat dependency --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- Use Jetty instead --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h3><p><strong>用法：</strong></p><ul><li>修改<code>server</code>下的相关配置就可以修改<strong>服务器参数</strong></li><li>通过给容器中放一个<code>**ServletWebServerFactory**</code>，来禁用掉SpringBoot默认放的服务器工厂，实现自定义嵌入<strong>任意服务器</strong>。</li></ul><h2 id="全面接管springmvc" tabindex="-1"><a class="header-anchor" href="#全面接管springmvc" aria-hidden="true">#</a> 全面接管<code>SpringMVC</code></h2><p>to do</p>`,47),K={href:"https://www.yuque.com/leifengyang/springboot3/wp5l9qbu1k64frz1#qo4C8",target:"_blank",rel:"noopener noreferrer"},Q=t(`<h2 id="最佳实战-1" tabindex="-1"><a class="header-anchor" href="#最佳实战-1" aria-hidden="true">#</a> 最佳实战</h2><h3 id="三种方式" tabindex="-1"><a class="header-anchor" href="#三种方式" aria-hidden="true">#</a> 三种方式</h3><table><thead><tr><th>方式</th><th>用法</th><th>用法</th><th>效果</th></tr></thead><tbody><tr><td><strong>全自动</strong></td><td>直接编写控制器逻辑</td><td></td><td>全部使用<strong>自动配置默认效果</strong></td></tr><tr><td><strong>手自一体</strong></td><td><code>@Configuration</code> + 配置\`WebMvcConfigurer+ <em>配置 WebMvcRegistrations</em></td><td><strong>不要标注</strong> <code>@EnableWebMvc</code></td><td><strong>保留自动配置效果</strong> <strong>手动设置部分功能</strong> 定义MVC底层组件</td></tr><tr><td><strong>全手动</strong></td><td><code>@Configuration</code> + 配置<code>WebMvcConfigurer</code></td><td><strong>标注</strong> <code>@EnableWebMvc</code></td><td><strong>禁用自动配置效果</strong> <strong>全手动设置</strong></td></tr></tbody></table><p>总结：</p><p>给容器中写一个配置类<code>@Configuration</code>实现 <code>WebMvcConfigurer</code>但是不要标注 <code>@EnableWebMvc</code>注解，实现<strong>手自一体</strong>的效果。</p><h3 id="两种模式" tabindex="-1"><a class="header-anchor" href="#两种模式" aria-hidden="true">#</a> 两种模式</h3><p>1、<code>前后分离模式</code>： <code>@RestController </code>响应<code>JSON</code>数据</p><p>2、<code>前后不分离模式</code>：<code>@Controller + Thymeleaf</code>模板引擎</p><h1 id="数据库开发" tabindex="-1"><a class="header-anchor" href="#数据库开发" aria-hidden="true">#</a> 数据库开发</h1><ul><li>导入依赖</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自动配置原理-1" tabindex="-1"><a class="header-anchor" href="#自动配置原理-1" aria-hidden="true">#</a> 自动配置原理</h2><p>自动配置原理</p><p><strong>SSM整合总结：</strong></p><ol><li><p><strong>导入</strong> <code>mybatis-spring-boot-starter</code></p></li><li><p>配置<strong>数据源</strong>信息</p></li><li><p>配置mybatis的<code>**mapper接口扫描**</code>与<code>**xml映射文件扫描**</code></p></li><li><p>编写bean，mapper，生成xml，编写sql 进行crud。<strong>事务等操作依然和Spring中用法一样</strong></p></li><li><p>效果：</p><ul><li>所有sql写在xml中</li><li>所有<code>mybatis配置</code>写在<code>application.properties</code>下面</li></ul></li><li><p><code>jdbc场景的自动配置</code>：</p><ul><li><code>mybatis-spring-boot-starter</code>导入 <code>spring-boot-starter-jdbc</code>，jdbc是操作数据库的场景</li><li><code>Jdbc</code>场景的几个自动配置</li><li>org.springframework.boot.autoconfigure.jdbc.<strong>DataSourceAutoConfiguration</strong></li></ul></li><li><p><strong>数据源的自动配置</strong></p><ul><li>所有和数据源有关的配置都绑定在<code>DataSourceProperties</code></li><li>默认使用 <code>HikariDataSource</code></li><li>org.springframework.boot.autoconfigure.jdbc.<strong>JdbcTemplateAutoConfiguration</strong></li><li>给容器中放了<code>JdbcTemplate</code>操作数据库</li><li>org.springframework.boot.autoconfigure.jdbc.<strong>JndiDataSourceAutoConfiguration</strong></li><li>org.springframework.boot.autoconfigure.jdbc.<strong>XADataSourceAutoConfiguration</strong></li></ul></li><li><p><strong>基于XA二阶提交协议的分布式事务数据源</strong></p><ul><li>org.springframework.boot.autoconfigure.jdbc.<strong>DataSourceTransactionManagerAutoConfiguration</strong></li><li><strong>支持事务</strong></li></ul></li><li><p><strong>具有的底层能力：数据源、</strong><code>JdbcTemplate</code>、<strong>事务</strong></p><ul><li><p><code>MyBatisAutoConfiguration</code>：配置了MyBatis的整合流程</p><ul><li><code>mybatis-spring-boot-starter</code>导入 <code>mybatis-spring-boot-autoconfigure（mybatis的自动配置包）</code>，</li></ul></li><li><p>默认加载两个自动配置类：</p><ul><li>org.mybatis.spring.boot.autoconfigure.MybatisLanguageDriverAutoConfiguration</li><li>org.mybatis.spring.boot.autoconfigure.<strong>MybatisAutoConfiguration</strong></li></ul></li><li><p><strong>必须在数据源配置好之后才配置</strong></p><ul><li>给容器中<code>SqlSessionFactory</code>组件。创建和数据库的一次会话</li><li>给容器中<code>SqlSessionTemplate</code>组件。操作数据库</li></ul></li><li><p><strong>MyBatis的所有配置绑定在</strong><code>MybatisProperties</code></p></li><li><p>每个<strong>Mapper接口</strong>的<strong>代理对象</strong>是怎么创建放到容器中。详见**@MapperScan**原理：</p><ul><li>利用<code>@Import(MapperScannerRegistrar.class)</code>批量给容器中注册组件。解析指定的包路径里面的每一个类，为每一个Mapper接口类，创建Bean定义信息，注册到容器中。</li></ul></li></ul></li></ol><p>如何分析哪个场景导入以后，开启了哪些自动配置类。</p><p>找：<code>classpath:/META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件中配置的所有值，就是要开启的自动配置类，但是每个类可能有条件注解，基于条件注解判断哪个自动配置类生效了。</p><h2 id="快速定位生效的配置" tabindex="-1"><a class="header-anchor" href="#快速定位生效的配置" aria-hidden="true">#</a> 快速定位生效的配置</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 打开 debug 模式
#debug=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展-整合其他数据源" tabindex="-1"><a class="header-anchor" href="#扩展-整合其他数据源" aria-hidden="true">#</a> 扩展：整合其他数据源</h2><h3 id="druid-数据源" tabindex="-1"><a class="header-anchor" href="#druid-数据源" aria-hidden="true">#</a> Druid 数据源</h3><p>暂不支持 <code>SpringBoot3</code></p><ul><li>导入<code>druid-starter</code></li><li>写配置</li><li>分析自动配置了哪些东西，怎么用</li></ul><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#数据源基本配置</span>
<span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://192.168.200.100:3306/demo</span>
<span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>
<span class="token key attr-name">spring.datasource.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.alibaba.druid.pool.DruidDataSource</span>

<span class="token comment"># 配置StatFilter监控</span>
<span class="token key attr-name">spring.datasource.druid.filter.stat.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">spring.datasource.druid.filter.stat.db-type</span><span class="token punctuation">=</span><span class="token value attr-value">mysql</span>
<span class="token key attr-name">spring.datasource.druid.filter.stat.log-slow-sql</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">spring.datasource.druid.filter.stat.slow-sql-millis</span><span class="token punctuation">=</span><span class="token value attr-value">2000</span>
<span class="token comment"># 配置WallFilter防火墙</span>
<span class="token key attr-name">spring.datasource.druid.filter.wall.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">spring.datasource.druid.filter.wall.db-type</span><span class="token punctuation">=</span><span class="token value attr-value">mysql</span>
<span class="token key attr-name">spring.datasource.druid.filter.wall.config.delete-allow</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
<span class="token key attr-name">spring.datasource.druid.filter.wall.config.drop-table-allow</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
<span class="token comment"># 配置监控页，内置监控页面的首页是 /druid/index.html</span>
<span class="token key attr-name">spring.datasource.druid.stat-view-servlet.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">spring.datasource.druid.stat-view-servlet.login-username</span><span class="token punctuation">=</span><span class="token value attr-value">admin</span>
<span class="token key attr-name">spring.datasource.druid.stat-view-servlet.login-password</span><span class="token punctuation">=</span><span class="token value attr-value">admin</span>
<span class="token key attr-name">spring.datasource.druid.stat-view-servlet.allow</span><span class="token punctuation">=</span><span class="token value attr-value">*</span>

<span class="token comment"># 其他 Filter 配置不再演示</span>
<span class="token comment"># 目前为以下 Filter 提供了配置支持，请参考文档或者根据IDE提示（spring.datasource.druid.filter.*）进行配置。</span>
<span class="token comment"># StatFilter</span>
<span class="token comment"># WallFilter</span>
<span class="token comment"># ConfigFilter</span>
<span class="token comment"># EncodingConvertFilter</span>
<span class="token comment"># Slf4jLogFilter</span>
<span class="token comment"># Log4jFilter</span>
<span class="token comment"># Log4j2Filter</span>
<span class="token comment"># CommonsLogFilter</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="示例数据库" tabindex="-1"><a class="header-anchor" href="#示例数据库" aria-hidden="true">#</a> 示例数据库</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>t_user<span class="token punctuation">\`</span></span>
<span class="token punctuation">(</span>
    <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span>         <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>   <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;编号&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>login_name<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户名称&#39;</span> <span class="token keyword">COLLATE</span> <span class="token string">&#39;utf8_general_ci&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>nick_name<span class="token punctuation">\`</span></span>  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户昵称&#39;</span> <span class="token keyword">COLLATE</span> <span class="token string">&#39;utf8_general_ci&#39;</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>passwd<span class="token punctuation">\`</span></span>     <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户密码&#39;</span> <span class="token keyword">COLLATE</span> <span class="token string">&#39;utf8_general_ci&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>login_name<span class="token punctuation">,</span> nick_name<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="基础特性" tabindex="-1"><a class="header-anchor" href="#基础特性" aria-hidden="true">#</a> 基础特性</h1><h2 id="banner" tabindex="-1"><a class="header-anchor" href="#banner" aria-hidden="true">#</a> Banner</h2><h2 id="springapplication" tabindex="-1"><a class="header-anchor" href="#springapplication" aria-hidden="true">#</a> SpringApplication</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token comment">// ===============1、自定义 SpringApplication 的底层设置</span>
<span class="token class-name">SpringApplication</span> application <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">Boot306FeaturesApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//程序化调整【SpringApplication的参数】</span>
<span class="token comment">//        application.setDefaultProperties();</span>
<span class="token comment">//这个配置不优先</span>
application<span class="token punctuation">.</span><span class="token function">setBannerMode</span><span class="token punctuation">(</span><span class="token class-name">Banner<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">OFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//【配置文件优先级高于程序化调整的优先级】</span>
<span class="token comment">//2、SpringApplication 运行起来</span>
application<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fluentbuilder-api" tabindex="-1"><a class="header-anchor" href="#fluentbuilder-api" aria-hidden="true">#</a> FluentBuilder API</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">SpringApplicationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">sources</span><span class="token punctuation">(</span><span class="token class-name">Parent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">bannerMode</span><span class="token punctuation">(</span><span class="token class-name">Banner<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">OFF</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="profiles" tabindex="-1"><a class="header-anchor" href="#profiles" aria-hidden="true">#</a> profiles</h2><blockquote><p>环境隔离能力；快速切换开发、测试、生产环境</p><p>步骤：</p><ol><li><strong>标识环境</strong>：指定哪些组件、配置在哪个环境生效</li><li><strong>切换环境</strong>：这个环境对应的所有组件和配置就应该生效</li></ol></blockquote><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><h4 id="指定环境" tabindex="-1"><a class="header-anchor" href="#指定环境" aria-hidden="true">#</a> 指定环境</h4><ul><li>Spring Profiles 提供一种<strong>隔离配置</strong>的方式，使其仅在<strong>特定环境</strong>生效；</li><li>任何<code>@Component, @Configuration</code> 或 <code>@ConfigurationProperties</code> 可以使用 <code>@Profile</code> 标记，来指定何时被加载。【<strong>容器中的组件</strong>都可以被 <code>@Profile</code>标记】</li></ul><h4 id="环境激活" tabindex="-1"><a class="header-anchor" href="#环境激活" aria-hidden="true">#</a> 环境激活</h4><ol><li>配置激活指定环境； 配置文件</li></ol><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token value attr-value">production,hsqldb</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>也可以使用命令行激活。<code>--spring.profiles.active=dev,hsqldb</code></li><li>还可以配置<strong>默认环境</strong>； 不标注<code>@Profile</code> 的组件永远都存在。 <ul><li>以前默认环境叫default</li><li><code>spring.profiles.default=test</code></li></ul></li><li>推荐使用激活方式激活指定环境</li></ol><h4 id="环境包含" tabindex="-1"><a class="header-anchor" href="#环境包含" aria-hidden="true">#</a> 环境包含</h4><p>注意：</p><ol><li>spring.profiles.active 和spring.profiles.default 只能用到 <strong>无 profile 的文件</strong>中，如果在application-dev.yaml中编写就是<strong>无效的</strong></li><li>也可以<strong>额外添加生效文件</strong>，而不是激活替换。比如：</li></ol><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>
<span class="token key attr-name">spring.profiles.include[0]</span><span class="token punctuation">=</span><span class="token value attr-value">common</span>
<span class="token key attr-name">spring.profiles.include[1]</span><span class="token punctuation">=</span><span class="token value attr-value">local</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最佳实战：</p><ul><li><strong>生效的环境</strong> = <strong>激活的环境/默认环境</strong> + <strong>包含的环境</strong></li><li>项目里面这么用 <ul><li>基础的配置<code>mybatis</code>、<code>log</code>、<code>xxx</code>：写到<strong>包含环境中</strong></li><li>需要动态切换变化的 <code>db</code>、<code>redis</code>：写到<strong>激活的环境中</strong></li></ul></li></ul><h3 id="profile-配置文件" tabindex="-1"><a class="header-anchor" href="#profile-配置文件" aria-hidden="true">#</a> Profile 配置文件</h3><ul><li><code>application-{profile}.properties</code>可以作为<strong>指定环境的配置文件</strong>。</li><li>激活这个环境，<strong>配置</strong>就会生效。最终生效的所有<strong>配置</strong>是 <ul><li><code>application.properties</code>：主配置文件，任意时候都生效</li><li><code>application-{profile}.properties</code>：指定环境配置文件，激活指定环境生效</li></ul></li></ul><p>profile优先级 &gt; application</p><h3 id="外部化配置" tabindex="-1"><a class="header-anchor" href="#外部化配置" aria-hidden="true">#</a> 外部化配置</h3><p><strong>场景</strong>：线上应用如何<strong>快速修改配置</strong>，并应<strong>用最新配置</strong>？</p><ul><li>SpringBoot 使用 <strong>配置优先级</strong> + <strong>外部配置</strong> 简化配置更新、简化运维。</li><li>只需要给<code>jar</code>应用所在的文件夹放一个<code>application.properties</code>最新配置文件，重启项目就能自动应用最新配置</li></ul><h4 id="配置优先级" tabindex="-1"><a class="header-anchor" href="#配置优先级" aria-hidden="true">#</a> 配置优先级</h4><p>Spring Boot 允许将<strong>配置外部化</strong>，以便可以在不同的环境中使用相同的应用程序代码。</p><p>我们可以使用各种<strong>外部配置源</strong>，包括Java Properties文件、YAML文件、环境变量和命令行参数。</p><p>@Value可以获取值，也可以用@ConfigurationProperties将所有属性绑定到java object中</p><p><strong>以下是 SpringBoot 属性源加载顺序。</strong> <strong>后面的会覆盖前面的值</strong>。由低到高，高优先级配置覆盖低优先级</p><ol><li><strong>默认属性</strong>（通过<code>SpringApplication.setDefaultProperties</code>指定的）</li><li>@PropertySource指定加载的配置（需要写在@Configuration类上才可生效）</li><li><strong>配置文件</strong>（ <strong>application.properties/yml</strong>等）</li><li>RandomValuePropertySource支持的random.*配置（如：@Value(&quot;\${random.int}&quot;)）</li><li>OS 环境变量</li><li>Java 系统属性（System.getProperties()）</li><li>JNDI 属性（来自java:comp/env）</li><li>ServletContext 初始化参数</li><li><code>ServletConfig</code> 初始化参数</li><li><code>SPRING_APPLICATION_JSON</code>属性（内置在环境变量或系统属性中的 JSON）</li><li><strong>命令行参数</strong></li><li>测试属性。(<code>@SpringBootTest</code>进行测试时指定的属性)</li><li>测试类@TestPropertySource注解</li><li>Devtools 设置的全局属性。($HOME/.config/spring-boot)</li></ol><p>结论：配置可以写到很多位置，常见的优先级顺序：</p><ul><li><code>命令行</code>&gt; <code>配置文件</code>&gt; <code>springapplication配置</code></li></ul><p><strong>配置文件优先级</strong>如下：(<strong>后面覆盖前面</strong>)（由小到大）</p><ol><li><strong>jar 包内</strong>的 <code>application.properties/yml</code></li><li><strong>jar 包内</strong>的 <code>application-{profile}.properties/yml</code></li><li><strong>jar 包外</strong>的 <code>application.properties/yml</code></li><li><strong>jar 包外</strong>的 <code>application-{profile}.properties/yml</code></li></ol><p><strong>建议</strong>：<strong>用一种格式的配置文件</strong>。<code>如果.properties和.yml同时存在,则.properties优先</code></p><blockquote><p>结论：<code>包外 &gt; 包内</code>； 同级情况：<code>profile配置 &gt; application配置</code></p></blockquote><p>所有参数均可由命令行传入，使用<code>--参数项=参数值</code>，将会被添加到环境变量中，并优先于配置文件。</p><p><strong>比如</strong><code>java -jar app.jar --name=&quot;Spring&quot;</code><strong>,可以使用</strong><code>@Value(&quot;\${name}&quot;)</code><strong>获取</strong></p><p>演示场景：</p><ul><li>包内： application.properties <code>server.port=8000</code></li><li>包内： application-dev.properties <code>server.port=9000</code></li><li>包外： application.properties <code>server.port=8001</code></li><li>包外： application-dev.properties <code>server.port=9001</code></li></ul><p>启动端口？：命令行 &gt; <code>9001</code> &gt; <code>8001</code> &gt; <code>9000</code> &gt; <code>8000</code></p><h2 id="外部配置" tabindex="-1"><a class="header-anchor" href="#外部配置" aria-hidden="true">#</a> 外部配置</h2><p>SpringBoot 应用启动时会自动寻找 application.properties 和 application.yaml 位置，进行加载。顺序如下：（<strong>后面覆盖前面</strong>）</p><ol><li><p>类路径: 内部</p><ul><li>类根路径</li><li>类下/config包</li></ul></li><li><p>当前路径（项目所在的位置）</p><ul><li>当前路径</li><li>当前下/config子目录</li><li>/config目录的直接子目录</li></ul></li></ol><p>最终效果：优先级由高到低，前面覆盖后面</p><ul><li>命令行 &gt; 包外config直接子目录 &gt; 包外config目录 &gt; 包外根目录 &gt; 包内目录</li><li>同级比较： <ul><li>profile配置 &gt; 默认配置</li><li>properties配置 &gt; yaml配置</li></ul></li></ul><figure><img src="`+w+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>规律：最外层的最优先。</p><ul><li>命令行 &gt; 所有</li><li>包外 &gt; 包内</li><li>config目录 &gt; 根目录</li><li>profile &gt; application</li></ul><p>配置不同就都生效（互补），配置相同高优先级覆盖低优先级</p><h2 id="导入配置" tabindex="-1"><a class="header-anchor" href="#导入配置" aria-hidden="true">#</a> 导入配置</h2><p>使用<code>spring.config.import</code>可以导入额外配置</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.config.import</span><span class="token punctuation">=</span><span class="token value attr-value">my.properties  # 优先</span>
    
<span class="token key attr-name">my.property</span><span class="token punctuation">=</span><span class="token value attr-value">value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>无论以上写法的先后顺序，<code>my.properties</code>的值总是优先于直接在文件中编写的<code>my.property</code>。</p><h2 id="属性占位符" tabindex="-1"><a class="header-anchor" href="#属性占位符" aria-hidden="true">#</a> 属性占位符</h2><p>配置文件中可以使用 \${name:default}形式取出之前配置过的值。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">app.name</span><span class="token punctuation">=</span><span class="token value attr-value">MyApp</span>
<span class="token key attr-name">app.description</span><span class="token punctuation">=</span><span class="token value attr-value">\${app.name} is a Spring Boot application written by \${username:Unknown}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="单元测试-junit5" tabindex="-1"><a class="header-anchor" href="#单元测试-junit5" aria-hidden="true">#</a> 单元测试 Junit5</h2><p>to do</p><h1 id="核心原理" tabindex="-1"><a class="header-anchor" href="#核心原理" aria-hidden="true">#</a> 核心原理</h1><p>to do</p><h1 id="参考-1" tabindex="-1"><a class="header-anchor" href="#参考-1" aria-hidden="true">#</a> 参考</h1>`,91),Z={href:"https://www.yuque.com/leifengyang/springboot3/wp5l9qbu1k64frz1#v1tQl",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://zhuanlan.zhihu.com/p/115891808",target:"_blank",rel:"noopener noreferrer"};function sn(an,en){const a=i("ExternalLinkIcon");return p(),c("div",null,[x,l(" more "),M,n("p",null,[s("官方的"),S,s("："),n("a",A,[s("https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters"),e(a)])]),j,n("table",null,[q,n("tbody",null,[E,n("tr",null,[_,n("td",null,[s("org.springframework.core.codec, org.springframework.http, "),n("a",R,[s("org.springframework.web"),e(a)]),s(", "),n("a",T,[s("org.springframework.boot.actuate.endpoint.web"),e(a)]),s(", org.springframework.boot.web.servlet.ServletContextInitializerBeans")])])])]),P,n("table",null,[n("thead",null,[n("tr",null,[n("th",null,[n("a",I,[s("logging.file.name"),e(a)])]),W,H,O])]),L]),N,n("ol",null,[F,n("li",null,[D,n("ol",null,[B,V,n("li",null,[s("cacheControl： "),X,s("控制；"),n("a",U,[s("https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching"),e(a)])]),z])])]),G,n("ul",null,[n("li",null,[n("a",J,[s("https://www.yuque.com/leifengyang/springboot3/wp5l9qbu1k64frz1#v1tQl"),e(a)])]),n("li",null,[n("a",Y,[s("https://zhuanlan.zhihu.com/p/115891808"),e(a)])])]),$,n("p",null,[n("a",K,[s("https://www.yuque.com/leifengyang/springboot3/wp5l9qbu1k64frz1#qo4C8"),e(a)])]),Q,n("p",null,[n("a",Z,[s("https://www.yuque.com/leifengyang/springboot3/wp5l9qbu1k64frz1#v1tQl"),e(a)]),n("a",nn,[s("https://zhuanlan.zhihu.com/p/115891808"),e(a)])])])}const on=o(C,[["render",sn],["__file","4.spring-boot.html.vue"]]);export{on as default};
